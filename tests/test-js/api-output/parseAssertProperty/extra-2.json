{
  "instructions": [
    "let parseAssertElemProp = await page.$(\"a\");\nif (parseAssertElemProp === null) { throw '\"a\" not found'; }\nawait page.evaluate(e => {\n    const nonMatchingProps = [];\n    const parseAssertElemPropDict = {\"a\":\"1\"};\n    const undefProps = [];\n    for (const prop of undefProps) {\n        if (e[prop] !== undefined) {\n            nonMatchingProps.push(\"Expected property `\" + prop + \"` to not exist, found: `\" + e[prop] + \"`\");\n            continue;\n        }\n    }\n    for (const [parseAssertElemPropKey, parseAssertElemPropValue] of Object.entries(parseAssertElemPropDict)) {\n        if (e[parseAssertElemPropKey] === undefined) {\n            nonMatchingProps.push('Unknown property `' + parseAssertElemPropKey + '`');\n            continue;\n        }\n        if (!String(e[parseAssertElemPropKey]).startsWith(parseAssertElemPropValue)) {\n            nonMatchingProps.push('Property `' + parseAssertElemPropKey + '` (`' + e[parseAssertElemPropKey] + '`) does not start with `' + parseAssertElemPropValue + '`');\n        }\n    }\n    if (nonMatchingProps.length !== 0) {\n        const props = nonMatchingProps.join(\", \");\n        throw \"The following errors happened (for selector `a`): [\" + props + \"]\";\n    }\n}, parseAssertElemProp);"
  ],
  "wait": false,
  "warnings": [
    "`STARTS_WITH` is present more than once in the third argument array"
  ],
  "checkResult": true
}
