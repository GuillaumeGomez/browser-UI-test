{
  "instructions": [
    "let parseAssertElemAttr = await page.$(\"a\");\nif (parseAssertElemAttr === null) { throw '\"a\" not found'; }\nawait page.evaluate(e => {\n    const nonMatchingAttrs = [];\n    const parseAssertElemAttrDict = {\"a\":\"c\"};\n    const nullAttributes = [\"\\\"b\"];\n    for (const attr of nullAttributes) {\n        if (e.hasAttribute(attr)) {\n            nonMatchingAttrs.push(\"Expected `null` for attribute `\" + attr + \"`, found: `\" + e.getAttribute(attr) + \"`\");\n            continue;\n        }\n    }\n    for (const [parseAssertElemAttrAttribute, parseAssertElemAttrValue] of Object.entries(parseAssertElemAttrDict)) {\n        if (!e.hasAttribute(parseAssertElemAttrAttribute)) {\n            nonMatchingAttrs.push(\"No attribute named `\" + parseAssertElemAttrAttribute + \"`\");\n            continue;\n        }\n        const attr = e.getAttribute(parseAssertElemAttrAttribute);\n        if (attr !== parseAssertElemAttrValue) {\n            nonMatchingAttrs.push(\"attribute `\" + parseAssertElemAttrAttribute + \"` isn't equal to `\" + parseAssertElemAttrValue + \"` (`\" + attr + \"`)\");\n        }\n    }\n    if (nonMatchingAttrs.length !== 0) {\n        const props = nonMatchingAttrs.join(\", \");\n        throw \"The following errors happened (for selector `a`): [\" + props + \"]\";\n    }\n}, parseAssertElemAttr);"
  ],
  "wait": false,
  "warnings": [],
  "checkResult": true
}
