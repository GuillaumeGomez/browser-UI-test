instructions = [
  """async function checkPropForElem(elem) {
    return await elem.evaluate(e => {
        const nonMatchingProps = [];
        const parseWaitForPropDict = {\"color\":\"blue\"};
        const nullProps = [];
        for (const parseWaitForPropKey of nullProps) {
            if (e[parseWaitForPropKey] !== undefined && e[parseWaitForPropKey] !== null) {
                const prop = e[parseWaitForPropKey];
                nonMatchingProps.push(\"Expected property `\" + parseWaitForPropKey + \"` to not exist, found: `\" + prop + \"`\");
                continue;
            }
        }
        for (const [parseWaitForPropKey, parseWaitForPropValue] of Object.entries(parseWaitForPropDict)) {
            if (e[parseWaitForPropKey] === undefined || e[parseWaitForPropKey] === null) {
                nonMatchingProps.push(\"Property named `\" + parseWaitForPropKey + \"` doesn't exist\");
                continue;
            }
            const prop = e[parseWaitForPropKey];
            if (prop !== parseWaitForPropValue) {
                nonMatchingProps.push(\"expected `\" + parseWaitForPropValue + \"` for property `\" + parseWaitForPropKey + \"`, found `\" + prop + \"`\");
            }
        }
        return nonMatchingProps;
    });
}

const timeLimit = page.getDefaultTimeout();
const timeAdd = 50;
let allTime = 0;
let parseWaitForProp = null;
while (true) {
    while (true) {
        parseWaitForProp = await page.$(\"a\");
        if (parseWaitForProp !== null) {
            break;
        }
        await new Promise(r => setTimeout(r, timeAdd));
        if (timeLimit === 0) {
            continue;
        }
        allTime += timeAdd;
        if (allTime >= timeLimit) {
            throw new Error(\"The following CSS selector \\\"a\\\" was not found\");
        }
    }
    const nonMatchingProps = await checkPropForElem(parseWaitForProp);
    if (nonMatchingProps.length === 0) {
        break;
    }
    await new Promise(r => setTimeout(r, timeAdd));
    if (timeLimit === 0) {
        continue;
    }
    allTime += timeAdd;
    if (allTime >= timeLimit) {
        const props = nonMatchingProps.join(\", \");
        throw new Error(\"The following properties still don't match: [\" + props + \"]\");
    }
}""",
]
wait = false
warnings = [
]
checkResult = true
