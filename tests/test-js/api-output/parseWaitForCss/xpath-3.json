{
  "instructions": [
    "const timeLimit = page.getDefaultTimeout();\nconst timeAdd = 50;\nlet allTime = 0;\nlet parseWaitForCss = null;\nlet nonMatchingProps;\nwhile (true) {\n    while (true) {\n        parseWaitForCss = await page.$x(\"//a\");\n        if (parseWaitForCss.length !== 0) {\n            parseWaitForCss = parseWaitForCss[0];\n            break;\n        }\n        await new Promise(r => setTimeout(r, timeAdd));\n        if (timeLimit === 0) {\n            continue;\n        }\n        allTime += timeAdd;\n        if (allTime >= timeLimit) {\n            throw new Error(\"The following XPath \\\"//a\\\" was not found\");\n        }\n    }\n    nonMatchingProps = await page.evaluate(e => {\n        const nonMatchingProps = [];\n        let computedEntry;\n        let extractedFloat;\n        const parseWaitForCssDict = {\"x\":\"1\"};\n        const computedStyle = getComputedStyle(e);\n        for (const [parseWaitForCssKey, parseWaitForCssValue] of Object.entries(parseWaitForCssDict)) {\n            computedEntry = computedStyle[parseWaitForCssKey];\n            if (e.style[parseWaitForCssKey] != parseWaitForCssValue && computedEntry != parseWaitForCssValue) {\n                if (typeof computedEntry === \"string\" && computedEntry.search(/^(\\d+\\.\\d+px)$/g) === 0) {\n                    extractedFloat = browserUiTestHelpers.extractFloatOrZero(computedEntry, true) + \"px\";\n                    if (extractedFloat !== parseWaitForCssValue) {\n                        nonMatchingProps.push(parseWaitForCssKey + \": (`\" + computedEntry + \"` && `\" + extractedFloat + \"`) != `\" + parseWaitForCssValue + \"`)\");\n                    } else {\n                        continue;\n                    }\n                }\n                nonMatchingProps.push(parseWaitForCssKey + \": (`\" + computedEntry + \"` != `\" + parseWaitForCssValue + \"`)\");\n            }\n        }\n        return nonMatchingProps;\n    }, parseWaitForCss);\n    if (nonMatchingProps.length === 0) {\n        break;\n    }\n    await new Promise(r => setTimeout(r, timeAdd));\n    if (timeLimit === 0) {\n        continue;\n    }\n    allTime += timeAdd;\n    if (allTime >= timeLimit) {\n        const props = nonMatchingProps.join(\", \");\n        throw new Error(\"The following CSS properties still don't match: [\" + props + \"]\");\n    }\n}"
  ],
  "wait": false,
  "warnings": [],
  "checkResult": true
}
