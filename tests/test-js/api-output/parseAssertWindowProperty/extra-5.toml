instructions = [
  """await page.evaluate(() => {
    const nonMatchingProps = [];
    const parseAssertDictPropDict = {\"a\":\"b\"};
    const undefProps = [];
    for (const prop of undefProps) {
        if (window[prop] !== undefined && window[prop] !== null) {
            nonMatchingProps.push(\"Expected property `\" + prop + \"` to not exist, found: `\" + window[prop] + \"`\");
            continue;
        }
    }
    for (const [parseAssertDictPropKey, parseAssertDictPropValue] of Object.entries(parseAssertDictPropDict)) {
        if (window[parseAssertDictPropKey] === undefined) {
            nonMatchingProps.push('Unknown window property `' + parseAssertDictPropKey + '`');
            continue;
        }
        const parseAssertDictProp = window[parseAssertDictPropKey];
        if (!String(parseAssertDictProp).startsWith(parseAssertDictPropValue)) {
            nonMatchingProps.push('Property `' + parseAssertDictPropKey + '` (`' + parseAssertDictProp + '`) does not start with `' + parseAssertDictPropValue + '`');
        }
        if (Number.isNaN(parseAssertDictProp)) {
            nonMatchingProps.push('Property `' + parseAssertDictPropKey + '` (`' + parseAssertDictProp + '`) is NaN (for NEAR check)');
        } else if (Math.abs(parseAssertDictProp - parseAssertDictPropValue) > 1) {
            nonMatchingProps.push('Property `' + parseAssertDictPropKey + '` (`' + parseAssertDictProp + '`) is not within 1 of `' + parseAssertDictPropValue + '` (for NEAR check)');
        }
    }
    if (nonMatchingProps.length !== 0) {
        const props = nonMatchingProps.join(\", \");
        throw \"The following errors happened: [\" + props + \"]\";
    }
});""",
]
wait = false
checkResult = true
