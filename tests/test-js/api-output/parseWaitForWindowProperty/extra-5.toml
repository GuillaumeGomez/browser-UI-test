instructions = [
  """const timeLimit = page.getDefaultTimeout();
const timeAdd = 50;
let allTime = 0;
let property = null;
while (true) {
    property = await page.evaluate(() => {
        const errors = [];
        const propertyDict = {\"a\":\"b\"};
        const undefProps = [\"c\"];
        for (const prop of undefProps) {
            if (window[prop] !== undefined && window[prop] !== null) {
                errors.push(\"Expected property `\" + prop + \"` to not exist, found: `\" + window[prop] + \"`\");
                continue;
            }
        }
        for (const [propertyKey, propertyValue] of Object.entries(propertyDict)) {
            if (window[propertyKey] === undefined) {
                errors.push(\"window doesn't have a property named `\" + propertyKey + \"`\");
            }
            const property = String(window[propertyKey]);
            if (!property.startsWith(propertyValue)) {
                errors.push(\"window property `\" + propertyKey + \"` (`\" + property + \"`) doesn't start with `\" + propertyValue + \"` (for STARTS_WITH check)\");
            }
            if (!property.endsWith(propertyValue)) {
                errors.push(\"window property `\" + propertyKey + \"` (`\" + property + \"`) doesn't end with `\" + propertyValue + \"`\");
            }
        }
        return errors;
    });
    if (property.length === 0) {
        break;
    }
    await new Promise(r => setTimeout(r, timeAdd));
    if (timeLimit === 0) {
        continue;
    }
    allTime += timeAdd;
    if (allTime >= timeLimit) {
        const errs = property.join(\", \");
        throw new Error(\"The following window properties still don't match: [\" + errs + \"]\");
    }
}""",
]
wait = false
checkResult = true
warnings = [
  """Special checks (STARTS_WITH, ENDS_WITH) will be ignored for `null`""",
]
