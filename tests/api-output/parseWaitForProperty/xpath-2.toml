instructions = [
  """async function checkPropForElem(elem) {
    return await elem.evaluate(e => {
        function checkObjectPaths(object, path, callback, notFoundCallback) {
            const found = [];

            for (const subPath of path) {
                found.push(subPath);
                if (object === undefined || object === null) {
                    notFoundCallback(found);
                    return;
                }
                object = object[subPath];
            }
            callback(object);
        }

        const nonMatchingProps = [];
        const parseWaitForPropDict = [];
        const nullProps = [];
        for (const prop of nullProps) {
            checkObjectPaths(e, prop, val => {
                if (val !== undefined && val !== null) {
                    const p = prop.map(p => `\"${p}\"`).join('.');
                    nonMatchingProps.push(\"Expected property `\" + p + \"` to not exist, found: `\" + val + \"`\");
                    return;
                }
            }, _notFound => {
            });
        }
        for (const [parseWaitForPropKey, parseWaitForPropValue] of parseWaitForPropDict) {
            checkObjectPaths(e, parseWaitForPropKey, val => {
                if (val === undefined) {
                    const p = parseWaitForPropKey.map(p => `\"${p}\"`).join('.');
                    nonMatchingProps.push(\"Property `\" + p + \"` doesn't exist\");
                    return;
                }
                if (val !== parseWaitForPropValue) {
                    nonMatchingProps.push(\"expected `\" + parseWaitForPropValue + \"` for property `\" + parseWaitForPropKey + \"`, found `\" + val + \"`\");
                }
            }, _notFound => {
                const p = parseWaitForPropKey.map(p => `\"${p}\"`).join('.');
                nonMatchingProps.push(\"Property `\" + p + \"` doesn't exist\");
            });
        }
        return nonMatchingProps;
    });
}

const timeLimit = page.getDefaultTimeout();
const timeAdd = 50;
let allTime = 0;
let parseWaitForProp = null;
while (true) {
    while (true) {
        parseWaitForProp = await page.$(\"::-p-xpath(//a)\");
        if (parseWaitForProp !== null) {
            break;
        }
        await new Promise(r => setTimeout(r, timeAdd));
        if (timeLimit === 0) {
            continue;
        }
        allTime += timeAdd;
        if (allTime >= timeLimit) {
            throw new Error(\"The following XPath \\\"//a\\\" was not found\");
        }
    }
    const nonMatchingProps = await checkPropForElem(parseWaitForProp);
    if (nonMatchingProps.length === 0) {
        break;
    }
    await new Promise(r => setTimeout(r, timeAdd));
    if (timeLimit === 0) {
        continue;
    }
    allTime += timeAdd;
    if (allTime >= timeLimit) {
        const props = nonMatchingProps.join(\", \");
        throw new Error(\"The following properties still don't match: [\" + props + \"]\");
    }
}""",
]
wait = false
warnings = [
]
checkResult = true
