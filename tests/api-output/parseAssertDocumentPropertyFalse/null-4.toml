instructions = [
  """await page.evaluate(() => {
    function checkObjectPaths(object, path, callback, notFoundCallback) {
        const found = [];

        for (const subPath of path) {
            found.push(subPath);
            if (object === undefined || object === null) {
                notFoundCallback(found);
                return;
            }
            object = object[subPath];
        }
        callback(object);
    }

    const nonMatchingProps = [];
    const parseAssertObjDict = [];
    const undefProps = [[\"a\"]];
    for (const prop of undefProps) {
        checkObjectPaths(document, prop, val => {
            if (val !== undefined && val !== null) {

                return;
            }
            const p = prop.map(p => `\"${p}\"`).join('.');
            nonMatchingProps.push(\"Property named `\" + p + \"` doesn't exist\");
        }, prop => {
            const p = prop.map(p => `\"${p}\"`).join('.');
            nonMatchingProps.push(\"Property named `\" + p + \"` doesn't exist\");
        });
    }
    for (const [parseAssertObjKey, parseAssertObjValue] of parseAssertObjDict) {
        checkObjectPaths(document, parseAssertObjKey, val => {
            if (val === undefined || val === null) {
                return;
            }
            const prop = String(val);
            if (prop.startsWith(parseAssertObjValue)) {
                nonMatchingProps.push(\"assert didn't fail for document property `\" + parseAssertObjKey + \"` (`\" + prop + \"`) (for STARTS_WITH check)\");
            }
            const tmpNb = parseFloat(prop);
            const tmpNb2 = parseFloat(parseAssertObjValue);
            if (Number.isNaN(tmpNb)) {
                nonMatchingProps.push('document property `' + parseAssertObjKey + '` (`' + prop + '`) is NaN (for NEAR check)');
            } else if (Number.isNaN(tmpNb2)) {
                nonMatchingProps.push('provided value for `' + parseAssertObjKey + '` is NaN (for NEAR check)');
            } else if (Math.abs(tmpNb - tmpNb2) <= 1) {
                nonMatchingProps.push('document property `' + parseAssertObjKey + '` (`' + prop + '`) is within 1 of `' + parseAssertObjValue + '` (for NEAR check)');
            }
        }, parseAssertObjKey => {
        });
    }
    if (nonMatchingProps.length !== 0) {
        const props = nonMatchingProps.join(\"; \");
        throw \"The following errors happened: [\" + props + \"]\";
    }
});""",
]
wait = false
warnings = [
  """Special checks (STARTS_WITH, NEAR) will be ignored for `null`""",
]
checkResult = true
