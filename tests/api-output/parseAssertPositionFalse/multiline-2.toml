instructions = [
  """const assertPosition = await page.$$(\"::-p-xpath(//a)\");
if (assertPosition.length === 0) { throw '\"//a\" not found'; }
const errors = [];
for (let i = 0, len = assertPosition.length; i < len; ++i) {
    errors.push(...await page.evaluate(elem => {
        const innerErrors = [];
        function checkAssertPosBrowser(e, field, styleField, kind, value, errors) {
            const v = browserUiTestHelpers.getElementPosition(e, \"\", field, styleField);
            const roundedV = Math.round(v);
            if (v === value || roundedV === Math.round(value)) {
                errors.push(\"same \" + kind + \" values (whereas it shouldn't): \" + v + \" (or \" + roundedV + \") != \" + value);
            }
        }
        checkAssertPosBrowser(elem, 'left', 'marginLeft', 'X', 1, innerErrors);
        checkAssertPosBrowser(elem, 'top', 'marginTop', 'Y', 2, innerErrors);
        return innerErrors;
    }, assertPosition[i]));
    if (errors.length !== 0) {
        break;
    }
}
if (errors.length > 0) {
    throw \"The following errors happened: [\" + errors.join(\"; \") + \"]\";
}""",
]
warnings = [
]
wait = false
checkResult = true
