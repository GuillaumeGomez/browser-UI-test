instructions = [
  """let parseAssertElemProp = await page.$$(\"a\");
if (parseAssertElemProp.length === 0) { throw '\"a\" not found'; }
for (let i = 0, len = parseAssertElemProp.length; i < len; ++i) {
    await page.evaluate(e => {
        const nonMatchingProps = [];
        const parseAssertElemPropDict = {\"a\":\"1\"};
        const undefProps = [];
        for (const prop of undefProps) {
            if (e[prop] !== undefined && e[prop] !== null) {
                nonMatchingProps.push(\"Expected property `\" + prop + \"` to not exist, found: `\" + e[prop] + \"`\");
                continue;
            }
        }
        for (const [parseAssertElemPropKey, parseAssertElemPropValue] of Object.entries(parseAssertElemPropDict)) {
            if (e[parseAssertElemPropKey] === undefined || e[parseAssertElemPropKey] === null) {
                nonMatchingProps.push('Unknown property `' + parseAssertElemPropKey + '`');
                continue;
            }
            const prop = String(e[parseAssertElemPropKey]);
            if (prop !== parseAssertElemPropValue) {
                nonMatchingProps.push(\"expected `\" + parseAssertElemPropValue + \"` for property `\" + parseAssertElemPropKey + \"`, found `\" + prop + \"`\");
            }
        }
        if (nonMatchingProps.length !== 0) {
            const props = nonMatchingProps.join(\"; \");
            throw \"The following errors happened (for selector `a`): [\" + props + \"]\";
        }
    }, parseAssertElemProp[i]);
}""",
]
wait = false
warnings = [
]
checkResult = true
