instructions = [
  """let parseAssertElemAttr = await page.$$(\"a\");
if (parseAssertElemAttr.length === 0) { throw '\"a\" not found'; }
for (let i = 0, len = parseAssertElemAttr.length; i < len; ++i) {
    await page.evaluate(e => {
        const nonMatchingAttrs = [];
        const parseAssertElemAttrDict = {\"a\":\"c\"};
        const nullAttributes = [\"\\\"b\"];
        for (const attr of nullAttributes) {
            if (e.hasAttribute(attr)) {
                nonMatchingAttrs.push(\"Expected attribute `\" + attr + \"` to not exist, found: `\" + e.getAttribute(attr) + \"`\");
                continue;
            }
        }
        for (const [parseAssertElemAttrAttribute, parseAssertElemAttrValue] of Object.entries(parseAssertElemAttrDict)) {
            if (!e.hasAttribute(parseAssertElemAttrAttribute)) {
                nonMatchingAttrs.push(\"No attribute named `\" + parseAssertElemAttrAttribute + \"`\");
                continue;
            }
            const attr = e.getAttribute(parseAssertElemAttrAttribute);
            if (!attr.includes(parseAssertElemAttrValue)) {
                nonMatchingAttrs.push(\"attribute `\" + parseAssertElemAttrAttribute + \"` (`\" + attr + \"`) doesn't contain `\" + parseAssertElemAttrValue + \"` (for CONTAINS check)\");
            }
            if (!attr.startsWith(parseAssertElemAttrValue)) {
                nonMatchingAttrs.push(\"attribute `\" + parseAssertElemAttrAttribute + \"` (`\" + attr + \"`) doesn't start with `\" + parseAssertElemAttrValue + \"` (for STARTS_WITH check)\");
            }
        }
        if (nonMatchingAttrs.length !== 0) {
            const props = nonMatchingAttrs.join(\"; \");
            throw \"The following errors happened (for selector `a`): [\" + props + \"]\";
        }
    }, parseAssertElemAttr[i]);
}""",
]
wait = false
warnings = [
  """Special checks (CONTAINS, STARTS_WITH) will be ignored for `null`""",
]
checkResult = true
