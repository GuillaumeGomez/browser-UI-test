instructions = [
  """const parseAssertElemAttr = await page.$(\"a\");
if (parseAssertElemAttr === null) { throw '\"a\" not found'; }
await page.evaluate(e => {
    const nonMatchingAttrs = [];
    const parseAssertElemAttrDict = {\"b\":\"c\",\"d\":\"e\"};
    const nullAttributes = [];
    for (const attr of nullAttributes) {
        if (e.hasAttribute(attr)) {
            nonMatchingAttrs.push(\"Expected attribute `\" + attr + \"` to not exist, found: `\" + e.getAttribute(attr) + \"`\");
            continue;
        }
    }
    for (const [parseAssertElemAttrAttribute, parseAssertElemAttrValue] of Object.entries(parseAssertElemAttrDict)) {
        if (!e.hasAttribute(parseAssertElemAttrAttribute)) {
            nonMatchingAttrs.push(\"No attribute named `\" + parseAssertElemAttrAttribute + \"`\");
            continue;
        }
        const attr = e.getAttribute(parseAssertElemAttrAttribute);
        if (attr !== parseAssertElemAttrValue) {
            nonMatchingAttrs.push(\"expected `\" + parseAssertElemAttrValue + \"` for attribute `\" + parseAssertElemAttrAttribute + \"`, found `\" + attr + \"`\");
        }
    }
    if (nonMatchingAttrs.length !== 0) {
        const props = nonMatchingAttrs.join(\"; \");
        throw \"The following errors happened (for selector `a`): [\" + props + \"]\";
    }
}, parseAssertElemAttr);""",
]
wait = false
warnings = [
]
checkResult = true
