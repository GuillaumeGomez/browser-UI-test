instructions = [
  """const timeLimit = pages[0].getDefaultTimeout();
const timeAdd = 50;
let allTime = 0;
let assertSize = null;
while (true) {
    while (true) {
        assertSize = await page.$$(\"a ::after\");
        if (assertSize.length !== 0) {
            assertSize = assertSize[0];
            break;
        }
        await new Promise(r => setTimeout(r, timeAdd));
        if (timeLimit === 0) {
            continue;
        }
        allTime += timeAdd;
        if (allTime >= timeLimit) {
            throw new Error(\"The CSS selector \\\"a ::after\\\" was not found\");
        }
    }
    let erroredElem = null;
    async function checkElemSize(elem) {
        return await elem.evaluate(e => {
            const innerErrors = [];
            const height = e.offsetHeight;
            const width = e.offsetWidth;
            if (width !== 1) {
                innerErrors.push(\"expected a width of `1`, found `\" + width + \"`\");
            }
            return innerErrors;
        });
    }
    const errors = [];
    errors.push(...await checkElemSize(assertSize));
    if (errors.length === 0) {
        break;
    }

    await new Promise(r => setTimeout(r, timeAdd));
    if (timeLimit === 0) {
        continue;
    }
    allTime += timeAdd;
    if (allTime >= timeLimit) {
        let err = \"The following checks still fail: [\" + errors.join(\", \") + \"]\";
        throw new Error(err);
    }
}""",
]
wait = false
warnings = [
]
checkResult = true
