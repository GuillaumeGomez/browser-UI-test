instructions = [
  """const timeLimit = page.getDefaultTimeout();
const timeAdd = 50;
let allTime = 0;
let assertSize = null;
while (true) {
    while (true) {
        assertSize = await page.$$(\"a\");
        if (assertSize.length !== 0) {
            break;
        }
        assertSize = assertSize[0];
        await new Promise(r => setTimeout(r, timeAdd));
        if (timeLimit === 0) {
            continue;
        }
        allTime += timeAdd;
        if (allTime >= timeLimit) {
            throw new Error(\"The CSS selector \\\"a\\\" was not found\");
        }
    }
    async function checkElemSize(elem) {
        return await elem.evaluate(e => {
            const innerErrors = [];
            const style = getComputedStyle(e, \"::after\");
            let height = parseFloat(style[\"height\"]);
            let width = parseFloat(style[\"width\"]);
            if (style[\"box-sizing\"] !== \"border-box\") {
                height += parseFloat(style[\"padding-top\"]) + parseFloat(style[\"padding-bottom\"]);
                height += parseFloat(style[\"border-top-width\"]) + parseFloat(style[\"border-bottom-width\"]);
                width += parseFloat(style[\"padding-left\"]) + parseFloat(style[\"padding-right\"]);
                width += parseFloat(style[\"border-left-width\"]) + parseFloat(style[\"border-right-width\"]);
            }
            if (width !== 1) {
                innerErrors.push(\"expected a width of `1`, found `\" + width + \"`\");
            }
            return innerErrors;
        });
    }
    const errors = [];
    errors.push(...await checkElemSize(assertSize));
    if (errors.length === 0) {
        break;
    }

    await new Promise(r => setTimeout(r, timeAdd));
    if (timeLimit === 0) {
        continue;
    }
    allTime += timeAdd;
    if (allTime >= timeLimit) {
        const err = errors.join(\", \");
        throw new Error(\"The following checks still fail: [\" + err + \"]\");
    }
}""",
]
wait = false
warnings = [
]
checkResult = true
