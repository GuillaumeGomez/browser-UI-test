instructions = [
  """const parseAssertElemProp = await page.$$(\"a\");
if (parseAssertElemProp.length === 0) { throw \"`a` not found\"; }
for (let i = 0, len = parseAssertElemProp.length; i < len; ++i) {
    await page.evaluate((e, i) => {
        function checkObjectPaths(object, path, callback, notFoundCallback) {
            const found = [];

            for (const subPath of path) {
                found.push(subPath);
                if (object === undefined || object === null) {
                    notFoundCallback(found);
                    return;
                }
                object = object[subPath];
            }
            callback(object);
        }

        const nonMatchingProps = [];
        const parseAssertElemPropDict = [[[\"a\",\"b\"],\"1\"]];
        const undefProps = [];
        for (const prop of undefProps) {
            checkObjectPaths(e, prop, val => {
                if (val !== undefined && val !== null) {

                    return;
                }
                const p = prop.map(p => `\"${p}\"`).join('.');
                nonMatchingProps.push(\"Property named `\" + p + \"` doesn't exist\");
            }, prop => {
                const p = prop.map(p => `\"${p}\"`).join('.');
                nonMatchingProps.push(\"Property named `\" + p + \"` doesn't exist\");
            });
        }
        for (const [parseAssertElemPropKey, parseAssertElemPropValue] of parseAssertElemPropDict) {
            checkObjectPaths(e, parseAssertElemPropKey, val => {
                if (val === undefined || val === null) {
                    return;
                }
                const prop = String(val);
                if (prop == parseAssertElemPropValue) {
                    nonMatchingProps.push(\"assert didn't fail for property `\" + parseAssertElemPropKey.map(p => `\"${p}\"`).join('.') + \"` (`\" + prop + \"`)\");
                }
            }, parseAssertElemPropKey => {
            });
        }
        if (nonMatchingProps.length !== 0) {
            const props = nonMatchingProps.join(\"; \");
            let err = \"The following errors happened (for selector `a`): [\" + props + \"]\";
            if (i !== undefined) {
                err += ' (on the element number ' + i + ')';
            }
            throw err;
        }
    }, parseAssertElemProp[i], i);
}""",
]
wait = false
warnings = [
]
checkResult = true
