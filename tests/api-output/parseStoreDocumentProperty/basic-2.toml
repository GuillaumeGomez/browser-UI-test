instructions = [
  """const jsHandle = await page.evaluateHandle(() => {
    function checkObjectPaths(object, path, callback, notFoundCallback) {
        const found = [];

        for (const subPath of path) {
            found.push(subPath);
            if (object === undefined || object === null) {
                notFoundCallback(found);
                return;
            }
            object = object[subPath];
        }
        callback(object);
    }
    const props = [[[\"\\\"ye\"], \"a\"]];
    const errors = [];
    const ret = [];

    for (const [prop, varName] of props) {
        checkObjectPaths(document, prop, found => {
            if (found === undefined) {
                const p = prop.map(p => `\"${p}\"`).join('.');
                errors.push('\"No property named `' + p + '`\"');
                return;
            }
            ret.push([found, varName]);
        }, _ => {
            const p = prop.map(p => `\"${p}\"`).join('.');
            errors.push('\"No property named `' + p + '`\"');
        });
    }
    if (errors.length !== 0) {
        throw \"The following errors happened: [\" + errors.join(\", \") + \"]\";
    }
    return ret;
});
const data = await jsHandle.jsonValue();
for (const [found, varName] of data) {
    arg.setVariable(varName, found);
}""",
]
wait = false
